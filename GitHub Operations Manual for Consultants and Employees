# 🧭 Consultant GitHub Operations Manual

This manual outlines standardized procedures for consultants using GitHub within our company. It ensures consistent, secure, and governance-aligned use across projects, clients, and internal initiatives.

---

## 🔹 Section 1: Repository Setup & Structure

### 1.1 Creating a New Repository
- Use organization-level GitHub account unless otherwise approved.
- Naming convention: `client-project-topic` (e.g., `acme-esg-gap-analysis`)
- Initialize with:
  - `README.md` (project overview)
  - `.gitignore` (based on tech stack)
  - `LICENSE` (default: MIT unless client specifies otherwise)

### 1.2 Folder Structure Guidelines
/docs/ → Stakeholder-ready documentation 
/src/ → Source code or scripts 
/templates/ → Reusable assets (e.g., glossaries, Q&A sets) 
/.github/workflows/ → CI/CD automation files


---

## 🔹 Section 2: Access Control & Permissions

### 2.1 Collaborator Roles
- Assign roles based on least privilege:
  - `Read` – View only  
  - `Triage` – Manage issues and PRs  
  - `Write` – Push code  
  - `Maintain` – Manage repo settings  
  - `Admin` – Full control (restricted to leads)

### 2.2 Branch Protection
- Protect `main` and `release/*` branches:
  - Require pull request reviews
  - Require status checks
  - Restrict direct pushes

---

## 🔹 Section 3: Workflow & Collaboration

### 3.1 Branching Strategy
- Use topic branches: `feature/`, `fix/`, `docs/`, `audit/`
- Merge via pull requests with clear descriptions and linked issues

### 3.2 Issue Management
- Use GitHub Issues to track:
  - Tasks  
  - Bugs  
  - Governance gaps  
  - Stakeholder requests

### 3.3 Labels & Milestones
- Apply labels: `priority`, `client`, `governance`, `security`, `documentation`
- Group issues under milestones for sprint or phase tracking

---

## 🔹 Section 4: Documentation Standards

### 4.1 Markdown Usage
- Use `.md` files for all documentation
- Include:
  - Glossary tables  
  - Acronym lists  
  - Stakeholder summaries  
  - Compliance mappings

### 4.2 README.md Template
```markdown
# Project Title  
## Overview  
Brief description of the project, client context, and objectives.

## Repository Structure  
- `/docs/` – Stakeholder documentation  
- `/src/` – Scripts or code  
- `/templates/` – Reusable assets  

## Contributors  
- Lead Consultant: [Name]  
- Technical Lead: [Name]  

# 🔐 Section 5: Security & Governance

## 5.1 Secrets Management
- Never commit credentials, API keys, or sensitive tokens to the repository.
- Use **GitHub Secrets** for CI/CD workflows and environment variables.
- Enable **secret scanning** and **Dependabot alerts** to detect vulnerabilities.
- Review pull requests for exposed secrets before merging.

## 5.2 Compliance Alignment
- Map deliverables to governance frameworks (e.g., ISO 37000, King IV, ISO/IEC 23894).
- Include `SECURITY.md` and `CODE_OF_CONDUCT.md` in all client-facing repositories.
- Document risk mitigation strategies and ethical considerations for AI/GenAI projects.
- Use stakeholder-friendly language when describing compliance measures.

---

# 📚 Section 6: Knowledge Sharing & Templates

## 6.1 Reusable Modules
Maintain shared repositories for:

| Module Type                     | Purpose                                      |
|--------------------------------|----------------------------------------------|
| Glossaries                     | Define technical and governance terms        |
| Risk Matrices                  | Map vulnerabilities to mitigation strategies |
| Governance Conversation Starters | Support boardroom engagement and clarity   |
| Responsible AI Toolkits        | Operationalize ethical AI principles         |
| Q&A Sets                       | Standardize stakeholder education            |

## 6.2 GitHub Pages (Optional)
- Use **GitHub Pages** for publishing sanitized, stakeholder-ready documentation.
- Ensure all content is reviewed for client confidentiality and compliance.
- Include navigation menus, glossaries, and visual aids where appropriate.

---

# 🔄 Section 7: Continuous Improvement

## 7.1 Feedback & Retrospectives
- Conduct internal retrospectives after each project phase or delivery.
- Capture lessons learned and update reusable assets accordingly.
- Encourage peer reviews and cross-team collaboration to refine best practices.

## 7.2 Certification & Learning
Track consultant progress on GitHub-aligned certifications:

| Certification                  | Focus Area                          |
|--------------------------------|-------------------------------------|
| GitHub Foundations             | Core GitHub skills and collaboration|
| GitHub Actions                 | CI/CD automation workflows          |
| GitHub Advanced Security       | Secure coding and vulnerability scanning|
| GitHub Administration          | Repo governance and access control |
| GitHub Copilot                 | AI-assisted coding workflows        |

- Maintain a shared learning repository with curated resources and walkthroughs.
- Encourage quarterly upskilling and certification renewals.

---

> ✅ These sections support operational excellence, governance alignment, and continuous learning. Consultants should apply these practices consistently across all engagements.
